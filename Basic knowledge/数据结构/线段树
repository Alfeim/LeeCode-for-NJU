主要参考 https://oi-wiki.org/ds/segment/

线段树是一种BST(二叉搜索树),其能够在O(logn)的时间复杂度内完成如区间求值、单点修改、区间查询等任务,一般来说,区间问题有两种通用解法,即树状数组与线段树。
二者作用虽然十分接近,但数状数组能够实现的线段树也一定能实现,反之不然,尽管一般情景下树状数组的代码可读性与简洁度要比线段树好的多,然而在个别情况下我们不
得不使用线段树来解决问题。

作为BST,我么很容易想到其性质:左孩子节点均小于父节点,右孩子节点则大等于父节点,如果我们不再维护一个数,而是一个区间,则本质上也就是左孩子维护区间的前半段
、右孩子维护区间的后半段,而父节点则表示左右孩子的总区间.

一、线段树的创建
线段树的create操作并不难,其至始至终贯彻二分的思想:
比如我们有一个区间[1,10],首先我们将整个大区间分为[1,5][6,10],那么根节点是[1,10]、左孩子也就是[1,5]、右孩子则是[6,10];
如果继续划分下去,我们可以把左孩子再分为[1,3][4,5],右孩子分为[6,8][9,10]..如此往复直到区间内只有唯一元素,也就到达叶子节点、不可再分,
我们很容易看出建立一颗线段树的时间复杂度是O(logN)--N代表区间长度;

为了描述各节点的信息,我们用数组来表示各个节点,如果按照根节点下标为1,依次填充左右节点,我们可以看出对于下标为p的节点,其左孩子的下标是2 * p,
右孩子的下标则是2 * p + 1,对于长度为N的区间实际上我们只需要开辟一个 2 * N - 1长的数组就能完全存储各个节点的值了,为了方便一般我们设为2N

建树的代码非常简洁
void build(int left, int right, int p) {
  if (left == right) {   // 对 [left,right] 区间建树,当前根的编号为 p 
    d[p] = SEG[left];    //d[p]表示节点p所维护的区间和
    return;
  }
  int mid = (left + right) / 2;
  build(left, mid, p * 2), build(mid + 1, right, p * 2 + 1);
  // 递归对左右区间建树
  d[p] = d[p * 2] + d[(p * 2) + 1];
}

二、线段树的区间查询

比如上面的例子,如果要查询区间[1,10]的和,我们只需要返回根节点d[1]的值即可.如果要查询区间[1,5]的和,我们也只需要直接返回d[2]即可..
那么如果要查询区间[3,6]呢?
乍一看好像不好求?实际上我们可以划分成[3,3] [4,5]和[5,5] [6,6]
怎么样,这些区间是不是都有对应的d[p]呢?

至于该如何划分,本质同样是利用二分的思想,因为我们在建树的时候是按照区间二分的方式来创建的,所以我们只需要重新从最大区间开始,不断递归地
二分,直到完全覆盖所需要的区间即可.

查询代码1如下：

int getsum(int l, int r, int s, int t, int p) {
  // [l,r] 为查询区间,[s,t] 为当前节点包含的区间,p 为当前节点的编号
  if (l <= s && t <= r)         // if( l == s && t == r)
    return d[p];                // 如果当前问询的区间恰好等于本节点的区间覆盖范围,就直接返回之
  int m = (s + t) / 2, sum = 0; 
  if (l <= m) sum += getsum(l, r, s, m, p * 2);
  // 如果左儿子代表的区间 [l,m] 与询问区间有交集,则递归查询左儿子
  if (r > m) sum += getsum(l, r, m + 1, t, p * 2 + 1);
  // 如果右儿子代表的区间 [m+1,r] 与询问区间有交集,则递归查询右儿子
  return sum;
}

因为我们已知根节点的区间范围,所以只需要从根节点开始递归,不断对当前节点的区间做二分,总能求出所需的解---同样,我们很容易看
出查询的时间消耗也是O(logN)级别的.


三.线段树的区间值修改

既然我们是用BST的结构来维护每一个区间的值,如果发生值的变动,如果要修改每一处对应的值,似乎需要反复递归才能够实现,这样的话
似乎会很费时把...

但考虑到毕竟修改区间的频率往往远小于查询的频率,如果发生区间修改时,我们先维护一个"可能更改"的信息,但不去真的实施变动,只有
在查询覆盖到"改动的区间"时才真正地去修改区间值,这样是不是更好些?

为了保存"更改信息",我们为每一个节点额外增加了一个叫做"懒惰标记"的信息.

比如说对于区间[1,5],我们要让其区间内的每一个值都+2,那我们并不需要真正让每一个叶子节点都加上2,只需要让他们的父节点,也就是区间[1,5]
所对应的节点维持一个值为2的懒惰值就可以了，同时将改节点的值加上2 * 5 = 10.

这样的话,当我们要查询修改后的区间的和时,比如对于区间[1,3],因为查询到[1,3]之前要先查询[1,5],我们发现[1,5]的懒惰值非空,所以这时候
要把懒惰值下放到其左右孩子,并清空[1,5]的懒惰标记.而由于懒惰值下放到了[1,3],所以区间[1,3]的值要加上2 * 3 = 6;



区间修改的代码:

void update(int l, int r, int c, int s, int t, int p) {
                                        // [l,r] 为修改区间,c 为被修改的元素的变化量,[s,t] 为当前节点包含的区间,p为当前节点的编号
  if (l <= s && t <= r) {               // 当前区间为修改区间的子集时直接修改当前节点的值,然后打标记,结束修改
    d[p] += (t - s + 1) * c, b[p] += c;
    return;
  }  
  int m = (s + t) / 2;
  if (b[p] && s != t) {                      // 如果当前节点的懒标记非空,需要先把原来的标记下传(s == t时候是叶节点就不用下传了)
    d[p * 2] += b[p] * (m - s + 1), d[p * 2 + 1] += b[p] * (t - m);
    b[p * 2] += b[p], b[p * 2 + 1] += b[p];  // 将标记下传给子节点
    b[p] = 0;                                // 清空当前节点的标记
  }
  if (l <= m) update(l, r, c, s, m, p * 2);         //更新左孩子
  if (r > m) update(l, r, c, m + 1, t, p * 2 + 1);  //更新右孩子  
  d[p] = d[p * 2] + d[p * 2 + 1];                   //更新本节点的值
}

区间查询代码2(在1之上额外增加了懒惰标记)

int getsum(int l, int r, int s, int t, int p) {
  // [l,r] 为修改区间,c 为被修改的元素的变化量,[s,t] 为当前节点包含的区间,p
  // 为当前节点的编号
  if (l <= s && t <= r) return d[p];
  // 当前区间为询问区间的子集时直接返回当前区间的和
  int m = (s + t) / 2;
  if (b[p]) {                                    // 如果当前节点的懒标记非空,则更新当前节点两个子节点的值和懒标记值
    d[p * 2] += b[p] * (m - s + 1), d[p * 2 + 1] += b[p] * (t - m),
        b[p * 2] += b[p], b[p * 2 + 1] += b[p];  // 将标记下传给子节点
    b[p] = 0;                                    // 清空当前节点的标记
  }
  int sum = 0;
  if (l <= m) sum = getsum(l, r, s, m, p * 2);
  if (r > m) sum += getsum(l, r, m + 1, t, p * 2 + 1);
  return sum;
}

实际上区间查询和区间修改的代码很像,只需要稍微修改即可

如果不是把区间加上某一值,而是修改成某一值的话,只需要把上面代码中的 += 改成=即可(除了递归的 +=)..实际上这时候的懒惰值
对应着被修改的值了

void update(int l, int r, int c, int s, int t, int p) {
  if (l <= s && t <= r) {
    d[p] = (t - s + 1) * c, b[p] = c;
    return;
  }
  int m = (s + t) / 2;
  if (b[p]) {
    d[p * 2] = b[p] * (m - s + 1), d[p * 2 + 1] = b[p] * (t - m),
          b[p * 2] = b[p * 2 + 1] = b[p];
    b[p] = 0;
  }
  if (l <= m) update(l, r, c, s, m, p * 2);
  if (r > m) update(l, r, c, m + 1, t, p * 2 + 1);
  d[p] = d[p * 2] + d[p * 2 + 1];
}
int getsum(int l, int r, int s, int t, int p) {
  if (l <= s && t <= r) return d[p];
  int m = (s + t) / 2;
  if (b[p]) {
    d[p * 2] = b[p] * (m - s + 1), d[p * 2 + 1] = b[p] * (t - m),
          b[p * 2] = b[p * 2 + 1] = b[p];
    b[p] = 0;
  }
  int sum = 0;
  if (l <= m) sum = getsum(l, r, s, m, p * 2);
  if (r > m) sum += getsum(l, r, m + 1, t, p * 2 + 1);
  return sum;
}





























